// vim: ft=javascript

// this assumes that the parser already passes test-irc-split.txt and
// test-irc-prefix-split.txt
//
// it is allowed for 'tags' and 'prefix' to be an empty list, dict, or other
// object instead of null
//
// if 'tags' is stored in a dict, the test process should convert it to a list
// containing key=value pairs (or just key if value is zero-length), and sort
// asciibetically
//
// if 'prefix' is stored in a dict or object, the test process should convert
// it to a list containing [nick, user, host, server]

"",				[null, null, []]
"foo",				[null, null, ["foo"]]
"foo bar",			[null, null, ["foo", "bar"]]

// just a prefix
":foo bar baz",			[null, ["foo", null, null, false], ["bar", "baz"]]
":foo. bar baz",		[null, [null, null, "foo.", true], ["bar", "baz"]]
":foo.qux bar baz",		[null, [null, null, "foo.qux", true], ["bar", "baz"]]
":a!b foo bar",			[null, ["a", "b", null, false], ["foo", "bar"]]
":a@c foo bar",			[null, ["a", null, "c", false], ["foo", "bar"]]
":a!b@c foo bar",		[null, ["a", "b", "c", false], ["foo", "bar"]]

// weird prefix
":a!b@c!d foo bar",		[null, ["a", "b", "c!d", false], ["foo", "bar"]]
":a@b!c@d foo bar",		[null, ["a@b", "c", "d", false], ["foo", "bar"]]
":a!b!c@d@e foo bar",		[null, ["a", "b!c", "d@e", false], ["foo", "bar"]]
":a!b@c!d@e foo bar",		[null, ["a", "b", "c!d@e", false], ["foo", "bar"]]

// just tags
"@foo bar baz",			[["foo"], null, ["bar", "baz"]]
"@c=d;e;a=b;f= foo bar",	[["a=b", "c=d", "e", "f"], null, ["foo", "bar"]]

// tags and prefix (a dumb split(/ :/) would misparse this as tags + 1 trailing param)
"@c;a=b :quux ab cd",		[["a=b", "c"], ["quux", null, null, false], ["ab", "cd"]]

// bad tag separator (a common typo)
"@c=d,e,a=b,f= foo bar",	[["c=d,e,a=b,f="], null, ["foo", "bar"]]

// wrongly ordered (tags are always before prefix, not after)
":foo @bar baz",		[null, ["foo", null, null, false], ["@bar", "baz"]]
